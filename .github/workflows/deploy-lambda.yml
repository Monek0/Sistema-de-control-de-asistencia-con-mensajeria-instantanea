name: Deploy Backend to AWS Lambda Container

on:
  push:
    branches:
      - main
    paths:
      - 'Plataforma_Atrasos/**'
      - '.github/workflows/deploy-lambda.yml'
      - '!Plataforma_Atrasos/frontend/**'
      - '!Plataforma_Atrasos/cypress/**'
      - '!Plataforma_Atrasos/__mocks__/**'
      - '!**.md'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: main
    outputs:
      api_url: ${{ steps.extract-endpoint.outputs.API_URL }}
      deployment_success: ${{ steps.deploy.outcome == 'success' }}
    defaults:
      run:
        working-directory: Plataforma_Atrasos
        shell: /usr/bin/bash -e {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names plataforma-atrasos-backend || \
          aws ecr create-repository --repository-name plataforma-atrasos-backend

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: plataforma-atrasos-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Set image URI for serverless deployment
          echo "ECR_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Install serverless framework globally
        run: npm install -g serverless@3

      - name: Install serverless plugins
        run: npm install --save-dev serverless-offline serverless-dotenv-plugin

      - name: Deploy to AWS Lambda
        id: deploy
        run: serverless deploy --stage production --region us-east-2 --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          FRONTEND_URL: 'http://localhost:3000'
          FRONTEND_URL_PROD: ${{ secrets.AMPLIFY_FRONTEND_URL || 'https://main.dgv3bb9afnpc.amplifyapp.com' }}
          ECR_IMAGE_URI: ${{ env.ECR_IMAGE_URI }}

      - name: Extract API endpoint
        id: extract-endpoint
        run: |
          API_ID=$(aws apigateway get-rest-apis --region us-east-2 --query "items[?name=='plataforma-atrasos-backend-production'].id" --output text)
          if [ -n "$API_ID" ]; then
            API_URL="https://${API_ID}.execute-api.us-east-2.amazonaws.com/production"
            echo "API_URL=$API_URL" >> $GITHUB_ENV
            echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
            echo "✅ API URL: $API_URL"
          else
            echo "⚠️ Could not determine API URL"
          fi
