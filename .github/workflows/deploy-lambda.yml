name: Deploy Backend to AWS Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'Plataforma_Atrasos/**'
      - '.github/workflows/deploy-lambda.yml'
      - '!Plataforma_Atrasos/frontend/**'
      - '!Plataforma_Atrasos/cypress/**'
      - '!Plataforma_Atrasos/__mocks__/**'
      - '!**.md'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: main
    outputs:
      api_url: ${{ steps.extract-endpoint.outputs.API_URL }}
      deployment_success: ${{ steps.deploy.outcome == 'success' }}
    defaults:
      run:
        working-directory: Plataforma_Atrasos
        shell: /usr/bin/bash -e {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: Plataforma_Atrasos/package-lock.json

      - name: Install dependencies
        run: |
          npm ci --omit=dev --omit=optional
          npm install -g serverless@3
          npm install --save \
            serverless-offline \
            serverless-dotenv-plugin \
            @vendia/serverless-express \
            whatsapp-web.js \
            puppeteer-core \
            chrome-aws-lambda

      - name: Debug installed modules
        run: |
          ls -lh node_modules/whatsapp-web.js || echo "whatsapp-web.js not found"
          ls -lh node_modules/puppeteer-core || echo "puppeteer-core not found"
          ls -lh node_modules/chrome-aws-lambda || echo "chrome-aws-lambda not found"

      - name: Clean up unnecessary packages
        run: |
          find node_modules -type d -name "test" -o -name "tests" | grep -v "@serverless" | xargs rm -rf || true
          find node_modules -name "*.md" -o -name "*.d.ts" -o -name "*.map" -o -name "LICENSE" | xargs rm -rf || true
          rm -rf node_modules/usb node_modules/escpos* node_modules/node-thermal-printer || true

      - name: Modify serverless.yml to disable dashboard
        run: |
          sed -i '/^org:/d' serverless.yml || true
          sed -i '/^app:/d' serverless.yml || true
          echo -e "\norg: false" >> serverless.yml
          echo "app: false" >> serverless.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy to AWS Lambda
        id: deploy
        run: serverless deploy --stage production --region us-east-2 --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          FRONTEND_URL: 'http://localhost:3000'
          FRONTEND_URL_PROD: ${{ secrets.AMPLIFY_FRONTEND_URL || 'https://main.dgv3bb9afnpc.amplifyapp.com' }}

      - name: Extract API endpoint
        id: extract-endpoint
        run: |
          API_ID=$(aws apigateway get-rest-apis --region us-east-2 --query "items[?name=='plataforma-atrasos-backend-production'].id" --output text)
          if [ -n "$API_ID" ]; then
            API_URL="https://${API_ID}.execute-api.us-east-2.amazonaws.com/production"
            echo "API_URL=$API_URL" >> $GITHUB_ENV
            echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
            echo "✅ API URL: $API_URL"
          else
            echo "⚠️ Could not determine API URL"
          fi
