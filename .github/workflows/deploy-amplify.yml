name: Deploy Frontend to AWS Amplify

on:
  push:
    branches:
      - main
    paths:
      - 'Plataforma_Atrasos/frontend/**'
      - '.github/workflows/deploy-amplify.yml'
  workflow_run:
    workflows: ["Deploy Backend to AWS Lambda"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Plataforma_Atrasos/frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: Plataforma_Atrasos/frontend/package-lock.json

      # Create a simple build patch for ajv-keywords issue
      - name: Create ajv patch file
        run: |
          # Create a patched version of ajv-keywords that won't fail
          mkdir -p patched-modules
          cat > patched-modules/patched-ajv-keywords.js << 'EOL'
          /** 
           * This is a patched version of ajv-keywords that ignores the formatMinimum keyword issue
           */
          module.exports = function (ajv, keyword) {
            if (!keyword || keyword === 'instanceof') {
              // Only apply the 'instanceof' keyword, ignore others
              try {
                ajv.addKeyword('instanceof', {
                  compile: function (schema) {
                    return function (data) {
                      return data instanceof schema;
                    };
                  }
                });
              } catch (e) {
                console.warn("Warning: Could not add 'instanceof' keyword", e.message);
              }
            }
            // Return modified ajv instance
            return ajv;
          };
          EOL

      - name: Install dependencies
        run: |
          # Use a clean install without loading cache
          npm cache clean --force
          
          # Create .npmrc to handle peer dependencies
          echo "legacy-peer-deps=true" > .npmrc
          
          # Install dependencies 
          npm install --legacy-peer-deps

      - name: Fix ajv-keywords issue
        run: |
          # Debug info - show the problematic files
          echo "Checking for problematic files..."
          find node_modules -path "*fork-ts-checker-webpack-plugin*schema-utils*validate.js" || echo "Validate.js not found"
          
          # Locate all instances of problematic ajv-keywords files
          find node_modules -path "*ajv-keywords/dist/index.js" > ajv-files.txt
          
          # Replace all problematic files
          echo "Replacing ajv-keywords implementations..."
          if [ -s ajv-files.txt ]; then
            while IFS= read -r file; do
              echo "Creating backup of $file"
              cp "$file" "${file}.bak"
              
              echo "Patching $file"
              cat > "$file" << 'EOL'
          'use strict';
          
          /**
           * Patched version to avoid "Unknown keyword formatMinimum" error
           */
          
          module.exports = function (ajv, keywords) {
            if (!keywords || keywords.includes('instanceof')) {
              try {
                ajv.addKeyword('instanceof', {
                  compile: function (schema) {
                    return function (data) {
                      return data instanceof schema;
                    };
                  }
                });
              } catch (e) {
                console.warn("Warning: Could not add 'instanceof' keyword", e.message);
              }
            }
            
            // Ignore other keywords that cause errors
            return ajv;
          };
          EOL
              echo "✅ Patched $file"
            done < ajv-files.txt
          else
            echo "⚠️ No ajv-keywords files found to patch"
          fi
          
          # Direct manual fix for the specific file causing the error
          VALIDATE_FILE="node_modules/fork-ts-checker-webpack-plugin/node_modules/schema-utils/dist/validate.js"
          if [ -f "$VALIDATE_FILE" ]; then
            echo "Directly patching $VALIDATE_FILE"
            cp "$VALIDATE_FILE" "${VALIDATE_FILE}.bak"
            
            # Replace the problematic line directly
            sed -i 's/ajvKeywords(ajv, \["instanceof", "formatMinimum", "formatMaximum", "patternRequired"\]);/try { ajvKeywords(ajv, ["instanceof"]); } catch(e) { console.warn("Ajv keywords error:", e); }/' "$VALIDATE_FILE"
            echo "✅ Directly patched $VALIDATE_FILE"
          else
            echo "⚠️ Could not find $VALIDATE_FILE"
            
            # Try alternative paths
            find node_modules -name "validate.js" | grep -i "schema-utils" | while read file; do
              echo "Found alternative file: $file, attempting patch..."
              cp "$file" "${file}.bak" 
              sed -i 's/ajvKeywords(ajv, \["instanceof", "formatMinimum", "formatMaximum", "patternRequired"\]);/try { ajvKeywords(ajv, ["instanceof"]); } catch(e) { console.warn("Ajv keywords error:", e); }/' "$file"
            done
          fi

      # Create API config file 
      - name: Create API Configuration
        run: |
          mkdir -p src/config
          cat > src/config/api.js << EOL
          // API configuration file - Auto-generated during deployment
          const API_URL = process.env.REACT_APP_API_URL || 'https://backend-sistema-asistencia-production.us-east-2.amazonaws.com';
          export default API_URL;
          EOL

      # Get API URL from previous workflow if available
      - name: Check for backend workflow trigger
        id: check-backend
        if: github.event_name == 'workflow_run'
        run: |
          echo "Triggered by backend deployment - retrieving API URL"
          echo "backend_triggered=true" >> $GITHUB_OUTPUT

      # Update API URL in the .env file
      - name: Setup environment configuration
        run: |
          if [ "${{ steps.check-backend.outputs.backend_triggered }}" == "true" ]; then
            # If triggered by backend, use its API URL if available
            # We have to pull the main branch as it may have been updated since our checkout
            git fetch origin main
            git checkout main
            echo "Using updated backend API URL from backend deployment"
          fi
          
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env
          echo "REACT_APP_BACKEND_STAGE=production" >> .env
          
          # Show what API URL we're using for debugging
          echo "Using API URL: ${{ secrets.REACT_APP_API_URL }}"

      - name: Build frontend
        run: |
          # Use NODE_OPTIONS to increase memory limit and debug environment
          export NODE_OPTIONS="--max-old-space-size=4096 --no-warnings"
          
          # Use a custom NODE_PATH to prioritize our patched modules
          export NODE_PATH="./patched-modules:$NODE_PATH"
          
          # Show environment variables for debugging
          echo "Environment variables:"
          env | grep -E 'NODE|REACT'
          
          # Try to build with React scripts
          CI=false GENERATE_SOURCEMAP=false npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Use Amplify CLI to deploy the built artifacts
      - name: Deploy to AWS Amplify
        run: |
          # Install AWS Amplify CLI if not already available
          npm install -g @aws-amplify/cli

          # Create zip of the build folder
          cd build
          zip -r ../build.zip .
          cd ..

          # Start deployment to Amplify
          DEPLOYMENT_ID=$(aws amplify start-deployment \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --branch-name main \
            --zip-file fileb://build.zip \
            --query 'jobId' \
            --output text)
          
          echo "Started deployment with ID: $DEPLOYMENT_ID"
          
          # Wait for deployment to complete
          aws amplify wait job-complete \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --branch-name main \
            --job-id $DEPLOYMENT_ID

          echo "Deployment completed successfully" 