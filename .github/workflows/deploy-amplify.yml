name: Deploy Frontend to AWS Amplify

on:
  push:
    branches:
      - main
    paths:
      - 'Plataforma_Atrasos/frontend/**'
      - '.github/workflows/deploy-amplify.yml'
  workflow_run:
    workflows: ["Deploy Backend to AWS Lambda"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: main
    defaults:
      run:
        working-directory: Plataforma_Atrasos/frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: Plataforma_Atrasos/frontend/package-lock.json

      - name: Clean npm cache and setup installation
        run: |
          # Create optimal .npmrc config
          cat > .npmrc << EOL
          legacy-peer-deps=true
          fund=false
          audit=false
          EOL
          
          # Clean npm cache for a fresh start
          npm cache clean --force

      - name: Install dependencies
        run: |
          # Install all dependencies including webpack explicitly
          npm install --no-fund --no-audit --legacy-peer-deps
          
          # Ensure webpack is installed
          npm install webpack@5.90.3 --no-fund --no-audit --legacy-peer-deps
          
          # List installed packages for debugging
          echo "Installed webpack version:"
          npm list webpack

      # Create API config file 
      - name: Create API Configuration
        run: |
          mkdir -p src/config
          
          # Determine correct backend API URL with fallback
          BACKEND_API_URL="${{ secrets.REACT_APP_API_URL }}"
          if [ -z "$BACKEND_API_URL" ]; then
            BACKEND_API_URL="https://backend-sistema-asistencia-production.us-east-2.amazonaws.com"
            echo "Using fallback API URL: $BACKEND_API_URL"
          else
            echo "Using configured API URL from secrets"
          fi
          
          # Create the API config file with the correct URL
          cat > src/config/api.js << EOL
          // API configuration file - Auto-generated during deployment
          const API_URL = process.env.REACT_APP_API_URL || '$BACKEND_API_URL';
          console.log('Using API URL:', API_URL);
          export default API_URL;
          EOL

      # Get API URL from previous workflow if available
      - name: Check for backend workflow trigger
        id: check-backend
        if: github.event_name == 'workflow_run'
        run: |
          echo "Triggered by backend deployment - retrieving API URL"
          echo "backend_triggered=true" >> $GITHUB_OUTPUT

      # Update API URL in the .env file
      - name: Setup environment configuration
        run: |
          if [ "${{ steps.check-backend.outputs.backend_triggered }}" == "true" ]; then
            # If triggered by backend, use its API URL if available
            # We have to pull the main branch as it may have been updated since our checkout
            git fetch origin main
            git checkout main
            echo "Using updated backend API URL from backend deployment"
          fi
          
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env
          echo "REACT_APP_BACKEND_STAGE=production" >> .env
          
          # Show what API URL we're using for debugging
          echo "Using API URL: ${{ secrets.REACT_APP_API_URL }}"

      - name: Build frontend
        run: |
          # Use NODE_OPTIONS to increase memory limit
          export NODE_OPTIONS="--max-old-space-size=4096 --no-warnings"
          
          # Disable eslint and other strict checks during build
          DISABLE_ESLINT_PLUGIN=true CI=false GENERATE_SOURCEMAP=false npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Use Amplify CLI to deploy the built artifacts
      - name: Deploy to AWS Amplify
        run: |
          # Check if AMPLIFY_APP_ID is set
          if [ -z "${{ secrets.AMPLIFY_APP_ID }}" ]; then
            echo "Error: AMPLIFY_APP_ID secret is not set. Please configure this in your GitHub repository secrets."
            exit 1
          fi
          
          echo "Using Amplify App ID: ${{ secrets.AMPLIFY_APP_ID }}"
          
          # Create a zip of the build artifacts
          echo "Creating deployment package..."
          cd build
          zip -r ../deploy.zip .
          cd ..
          
          # Deploy to Amplify using the AWS CLI
          echo "Starting Amplify deployment..."
          aws amplify start-deployment \
            --app-id "${{ secrets.AMPLIFY_APP_ID }}" \
            --branch-name main \
            --source-url "fileb://$(pwd)/deploy.zip" \
            --region us-east-2
          
          echo "Deployment initiated. Check the AWS Amplify console for build progress." 